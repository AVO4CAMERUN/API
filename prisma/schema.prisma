generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = "mysql://root:@localhost:3306/avo4cam"
  // connectionLimit : 100,
  // host: process.env.DB_HOST,
  // user: process.env.DB_USERNAME,
  // password: process.env.DB_PWD,
  // database: process.env.DB
}

model classes {
  id            Int            @id @default(autoincrement())
  name          String         @db.VarChar(255)
  creation_date DateTime       @db.Date @default(now())
  img_cover     Bytes?         @db.Blob
  archived      Boolean        @default(false)
  invitations   invitations[]
  prof_classes  prof_classes[]
}

model courses {
  id_course     Int             @id @default(autoincrement())
  email_creator String          @db.VarChar(255)
  name          String          @db.VarChar(15)
  description   String?         @db.VarChar(156)
  creation_date DateTime        @db.Date  @default(now())
  subject       courses_subject
  img_cover     Bytes?          @db.Blob
  users         users           @relation(fields: [email_creator], references: [email], onDelete: Cascade, onUpdate: Restrict, map: "courses_ibfk_1")
  courses_users courses_users[]
  units         units[]

  @@index([email_creator], map: "email_creator")
}

model courses_users {
  email     String  @db.VarChar(255)
  id_course Int     @db.Int
  users     users   @relation(fields: [email], references: [email], onDelete: Cascade, onUpdate: Cascade, map: "courses_users_ibfk_1")
  courses   courses @relation(fields: [id_course], references: [id_course], onDelete: Cascade, onUpdate: Cascade, map: "courses_users_ibfk_2")

  @@unique([email, id_course], map: "email")
  @@index([email, id_course], map: "courses_users_ibfk_3")
  
}

model exercise {
  id_exercise Int    @id @default(autoincrement())
  name        String @db.VarChar(50)
  description String @db.VarChar(255)
  id_unit     Int
  file        Bytes  @db.Blob
}

model invitations {
  id       Int     @id @default(autoincrement())
  id_class Int
  email    String  @db.VarChar(255)
  users    users   @relation(fields: [email], references: [email], onDelete: Cascade, map: "invitations_ibfk_2")
  classes  classes @relation(fields: [id_class], references: [id], onDelete: Cascade, map: "invitations_ibfk_1")

  @@unique([id_class, email], map: "id_class")
  @@index([email], map: "email")
}

model lessons {
  id_lesson     Int      @id @default(autoincrement())
  id_unit       Int
  name          String   @db.VarChar(50)
  creation_date DateTime @db.Date @default(now())
  link_video    String   @db.VarChar(255)
  quiz          String   @db.Text
  units         units    @relation(fields: [id_unit], references: [id_unit], onDelete: Cascade, map: "lessons_ibfk_1")

  @@unique([id_unit, name], map: "id_unit")
}

model prof_classes {
  email    String            @db.VarChar(255)
  id_class Int
  role     prof_classes_role
  users    users             @relation(fields: [email], references: [email], onDelete: Cascade, onUpdate: Restrict, map: "prof_classes_ibfk_1")
  classes  classes           @relation(fields: [id_class], references: [id], onDelete: Cascade, map: "prof_classes_ibfk_2")

  @@id([email, id_class])
  @@index([id_class], map: "id_class")
}

model units {
  id_unit     Int       @id @default(autoincrement())
  id_course   Int
  name        String    @db.VarChar(30)
  description String    @db.Text
  courses     courses   @relation(fields: [id_course], references: [id_course], onDelete: Cascade, onUpdate: Restrict, map: "units_ibfk_1")
  lessons     lessons[]

  @@unique([id_course, name], map: "id_course")
}

model users {
  email             String          @id @db.VarChar(255)
  role              users_role
  username          String          @db.VarChar(255) @unique
  firstname         String?         @db.VarChar(50)
  lastname          String?         @db.VarChar(50)
  password          String          @db.VarChar(255)
  registration_date DateTime        @db.Date  @default(now())
  img_profile       Bytes?          @db.Blob
  id_class          Int?
  courses           courses[]
  courses_users     courses_users[]
  invitations       invitations[]
  prof_classes      prof_classes[]
}

enum courses_subject {
  Mathematics
  Electrical_engineering @map("Electrical engineering")
  Informatics
  English
  Statistics
  Chemistry
}

enum prof_classes_role {
  TUTOR   @map("01")
  NORMAL  @map("02")
}

enum users_role {
  STUDENT @map("01")
  TEACHER @map("02")
  ADMIN   @map("03")
}