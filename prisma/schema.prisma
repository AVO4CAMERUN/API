generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model course {
  id_course     Int              @id @default(autoincrement())
  email_creator String           @db.VarChar(255)
  name          String           @db.VarChar(15)
  description   String?          @db.VarChar(156)
  creation_date DateTime         @default(now()) @db.Date
  subject       String
  img_cover     Bytes?           @db.Blob
  user          user             @relation(fields: [email_creator], references: [email], onDelete: Cascade, onUpdate: Cascade)
  course_subject course_subject  @relation(fields: [subject], references: [subject])

  courses_users courses_users[]
  unit          unit[]
  @@index([email_creator], map: "email_creator")
}

model course_subject {
  subject String @id
  course course[]
}

model courses_users {
  email     String @db.VarChar(255)
  user      user   @relation(fields: [email], references: [email], onDelete: Cascade)
  id_course Int
  course    course @relation(fields: [id_course], references: [id_course], onDelete: Cascade)
  @@id([email, id_course])
  @@index([id_course])
}

model exercise {
  id_exercise Int    @id @default(autoincrement())
  name        String @db.VarChar(50)
  description String @db.VarChar(255)
  id_unit     Int
  file        Bytes  @db.Blob
}

model groupclass {
  id               Int                @id @default(autoincrement())
  name             String             @db.VarChar(255)
  creation_date    DateTime           @default(now()) @db.Date
  img_cover        Bytes?             @db.Blob
  archived         Boolean            @default(false)
  invitation       invitation[]
  teachers_classes teachers_classes[]
}

model invitation {
  id         Int        @id @default(autoincrement())
  id_class   Int
  email      String     @db.VarChar(255)
  user       user       @relation(fields: [email], references: [email], onDelete: Cascade)
  groupclass groupclass @relation(fields: [id_class], references: [id], onDelete: Cascade)
  @@unique([id_class, email], map: "id_class")
  @@index([email], map: "email")
}

model lesson {
  id_lesson     Int      @id @default(autoincrement())
  id_unit       Int
  name          String   @db.VarChar(50)
  creation_date DateTime @default(now()) @db.Date
  link_video    String   @db.VarChar(255)
  quiz          String   @db.Text
  unit          unit     @relation(fields: [id_unit], references: [id_unit], onDelete: Cascade)
  @@unique([id_unit, name], map: "id_unit")
}

model teachers_classes {
  email      String                @db.VarChar(255)
  id_class   Int
  role       TEACHERSCLASSESROLE
  user       user                  @relation(fields: [email], references: [email], onDelete: Cascade, onUpdate: Restrict)
  groupclass groupclass            @relation(fields: [id_class], references: [id], onDelete: Cascade)
  @@id([email, id_class])
  @@index([id_class], map: "id_class")
}

model unit {
  id_unit     Int      @id @default(autoincrement())
  id_course   Int
  seqNumber   Int    
  name        String   @db.VarChar(30)
  description String   @db.Text
  course      course   @relation(fields: [id_course], references: [id_course], onDelete: Cascade, onUpdate: Restrict)
  lesson      lesson[]
  @@unique([id_course, name], map: "id_course")
}

model user {
  email             String             @id @db.VarChar(255)
  role              USERROLE
  username          String             @unique(map: "User_username_key") @db.VarChar(255)
  firstname         String?            @db.VarChar(50)
  lastname          String?            @db.VarChar(50)
  password          String             @db.VarChar(255)
  registration_date DateTime           @default(now()) @db.Date
  img_profile       Bytes?             @db.Blob
  id_class          Int?
  course            course[]
  courses_users     courses_users[]
  invitation        invitation[]
  teachers_classes  teachers_classes[]
}

enum TEACHERSCLASSESROLE {
  CREATOR @map("01")
  NORMAL  @map("02")
}

enum USERROLE {
  STUDENT @map("01")
  TEACHER @map("02")
  ADMIN   @map("03")
}